<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentDefaultExceptionMessage" xml:space="preserve">
    <value>The '{0}' parameter is equal to the default value of the type.</value>
  </data>
  <data name="ArgumentNullExceptionMessage" xml:space="preserve">
    <value>The '{0}' parameter may not be null.</value>
  </data>
  <data name="ArgumentNullOrDefaultExceptionMessage" xml:space="preserve">
    <value>The '{0}' parameter may not be null or empty.</value>
  </data>
  <data name="ArgumentNullOrEmptyExceptionMessage" xml:space="preserve">
    <value>The '{0}' parameter may not be null or empty.</value>
  </data>
  <data name="ChannelFactoriesDisposed" xml:space="preserve">
    <value>The Channel factories were released and disposed.</value>
  </data>
  <data name="ChannelFactoryCreateFailed" xml:space="preserve">
    <value>Was unable to create a ChannelFactory for the ServiceContract '{0}'.  This is typically due to an invalid endpoint configuration name.  The endpoint name used was '{1}'.  Please check the inner exception for more details.</value>
  </data>
  <data name="ChannelFactoryWithNoEndpoint" xml:space="preserve">
    <value>The ServiceContract '{0}' is not marked with the DefaultEnpointName attribute, and cannot be associated to an endpoint configuration.  Please use a GetProxy() overload that specifies connection information including binding and endpoint address, or use the DefaultEndpointNameAttribute on the service contract interface to specify the name of the endpoint configuration.</value>
  </data>
  <data name="ConfigurationSettingMissingOrInvalid" xml:space="preserve">
    <value>The {0} setting is missing or invalid.</value>
  </data>
  <data name="DataSourceMissingOrInvalid" xml:space="preserve">
    <value>The DataSource with a name of '{0}' does not exist, or is improperly configured.  Please ensure that you have a connectionString setting with a name equal to '{0}', and that it is properly configured.</value>
  </data>
  <data name="ExceptionFormatterConfigurationError" xml:space="preserve">
    <value>The exception formatter configuration is invalid for the following reasons: {0}</value>
  </data>
  <data name="InvalidEnumValueExceptionMessage" xml:space="preserve">
    <value>The value of the argument '{0}' provided for the enumeration '{1}' is invalid.</value>
  </data>
  <data name="InvalidValueExceptionMessage" xml:space="preserve">
    <value>{0} is an invalid value for '{1}'.</value>
  </data>
  <data name="ListenerRegistered" xml:space="preserve">
    <value>Listener '{0}' registered.</value>
  </data>
  <data name="ListenerSubscriptionThrewException" xml:space="preserve">
    <value>The {0} event subscription for target '{1}' threw an unhandled exception.</value>
  </data>
  <data name="NoCurrentHttpContext" xml:space="preserve">
    <value>There is no current instance of HttpContext.</value>
  </data>
  <data name="NoCurrentOperationContext" xml:space="preserve">
    <value>There is no current WCF operation context.</value>
  </data>
  <data name="NoNonStaticCompilerGeneratedClassesAllowed" xml:space="preserve">
    <value>The lambda or delegate expression used produces a Target that is compiler generated.  This type of delegate is not supported by the Event Aggregator due to reference tracking issues.</value>
  </data>
  <data name="NotAnEnumTypeExceptionMessage" xml:space="preserve">
    <value>The provided type is not an enum type.</value>
  </data>
  <data name="ReaderClosed" xml:space="preserve">
    <value>The reader is closed.</value>
  </data>
  <data name="ReturnValueIsNullExceptionMessage" xml:space="preserve">
    <value>The return value of method '{0}' is null.</value>
  </data>
  <data name="ReturnValueIsNullOrEmptyExceptionMessage" xml:space="preserve">
    <value>The return value of method '{0}' is null or empty.</value>
  </data>
  <data name="ReturnValueIsTheDefaultExceptionMessage" xml:space="preserve">
    <value>The return value of method '{0}' is the default value.</value>
  </data>
  <data name="ServiceConfigurationNameRequired" xml:space="preserve">
    <value>The ServiceLocationProperties.ServiceConfigurationName property is required, and must specify a name of an endpoint configuration.</value>
  </data>
  <data name="ServiceTypeCacheUnexpectedException" xml:space="preserve">
    <value>An unexpected exception has occurred in the ServiceTypeCache for the ServiceContract '{0'}.  Please see the InnerException for more details.</value>
  </data>
  <data name="TypeDoesNotSpecifySectionName" xml:space="preserve">
    <value>TSection does not define the DefaultSectionNameAttribute.  Either specify this attribute, or use the GetSection overload with the sectionName parameter.</value>
  </data>
  <data name="TypeNotServiceContract" xml:space="preserve">
    <value>'{0}' is not a service contract and a ChannelFactory could not be created for this type.</value>
  </data>
  <data name="TypeNotSupportedExceptionMessage" xml:space="preserve">
    <value>The '{0}' parameter must be the same type as, or inherit from, '{1}'.</value>
  </data>
</root>